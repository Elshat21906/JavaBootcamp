Java Bootcamp Day01

Topics:
		1. Primitives: int, double, char, boolean
		2. Primitive Type Castings: Implicit vs Explicit
		3. Wrapper class
		4. String
		5. Loops: for & while
		6. Array
		7. for each loop
		8. Custom Methods
		9. Method Overloading
		10. Class & Objects
		11. Constructor
		12. Static vs Instance
		13. Import Statements
		14. Access Modifiers
		15. OOP Encapsulations
		16. OOP Inheritance
		17. Method Overriding
		18. Final keyword
		19. OOP Abstraction
		20. Abstract Class vs Interface
		21. OOP Polymorphism
		22. Reference Type Castings: Upcasting vs DownCasting
		23. Exceptions: checked & unchecked
		24. Exception Handlings
		25. final vs finally vs finalize
		26. garbage collection & garbage collector
		27. Collections: List, Set, Queue
		28. Iteable & Iterator
		29. Maps

Data Types:
	1. Primitive Data Types
			byte < short < int < long < float < double

	2. Non-primitive Data Types

Type castings:
	1. Primitive Type casting (Primitives)

			1.1 implicit casting: casting smaller primitive type to larger primitive type
			1.2 explicit casting: casting larger primitive type to smaller primitive type

	2. Reference Type casting (Inheritance)

			2.1 Up-casting: casting smaller reference type to larger reference type
			2.2 Down-casting: casting larger reference type to smaller reference type

			WebDriver driver = new FireFoxDriver();
			( (TakeScreenShot)driver).takeScreenShot();
			((JavaScriptExecuter)driver).executeScript();


Wrapper Classes: the objects that represents the primitives


String: char sequences. IMMUTABLE
			"Java"
			new String("Java")

		String Methods: charAt, length, lower & upper, substring, equals, contains, startsWith, endsWith, split, toCharARray, indexOf, lastIndexOf

		==

StringBuilder: char sequences. MUTABLE. Not Synchronized
			
			new StringBuilder("Java")

StringBuffer: char sequences. MUTABLE. Synchronized
			
			new StringBuffer("Java")


Loops: repeated actions
	
	for loop: if the number of iteration is fixed

		for(initialization; condition; Iteration ){
				statements
		}

	while loop: if the number of iteration is NOT fixed, and we want it to be iterated until condition is false

		while(Condition){
			statements
		}


Array: size is fixed
	   Has Index
	   Supports primitives & non-primitives
	   Can be Multi-dimensional


For Each: MUST be applied to data structures
		  number of repeatings depend on the number of the elementsin the data structure
		  Iteration order is fixed (beginning to the end)


Custom Methods: Fuction
			grouping a series of code fragments that can perfom a task
			improves the reusability

			Acccess-Modifier  Specifier  Return-Type   methodName(Paramers){
						code fragements that can perform the task;
			}

			Acccess-Modifier: public, protected, default, private
			Specifier: static, final, abstract, synchronized
			ReturnType: void, Data-Type
			methodName: any name
			Paramer:Data-Type


Method overloading (static/compiletime polymorphism): multiple different methods sharing the same method name


Class & Object: Class is a template of objects, where all objects came from
				Object is an instance of class

Constructor: special method that every class must have
			 used for creating object. can determine how the object should be created
			 execution depndns on the object

			 Acccess-Modifier  ClassName(parameters){

			 }

			public BasePage(){
				 initElement(driver, this)
			}


			@FindBy


			private Driver(){

			}

			getDriver()


static vs instance:
		static: belongs to the class
				there is ONLY one copy for all objects 

		instance: belongs to the object
				 there are MULTIPLE copies. each object has its own copy


Import statements:
		
		regular import:

			import package.Class;
			import package.*;


		static import:
			import static package.Class.staticMember;
			import static package.Class.*;



Memory Allocation: process of allocating the objects
	Heap: Objects, Instance variables, static variables (AFter Java 8 version)

	stack: Method invocations, Local variables

	Non-Heap Memory: Methods area, static variables (Before Java 8 version)


@CucumberOptions(
	"usage" : ""
)

driver = null


Memory Deallocation: process of removing the unreference objects from the heap


Access Modifiers:  public > proctected > default > private


OOP: Object oreinted programming
			Less code
			Readable
			Reusable
			Maintainable
			Centralized structure
			less duplication
			less memory usage
			flexible
			...

Encapsulation: data hiding by giving private access modifier.
			   use public getter/setter to use the data outside the class

			   Getter: Read ONLY
			   Setter: Write ONLY
		
		POJO

Inheritance: Building IS A Relation (parent&child or super/sub) between classes
			
			class A extends Class B
				sub              super

			sub class: can inherit all the variable and methods that are visible	

			super class: does not inherit anything from sub class


			BasePage:
				BasePage(){
					PageFactory.initElement(driver, this);
				}

			pages extends BasePage

				@FindBy(xpath="")
				Webelement element;


			TestBase:
				driver

				@BeforeMethod

				@AfterMethod

				@BeforeClass

				@AfterClass

			TestClass1 extends TestBase

			TestClass2 extends TestBase

			TestClass3 extends TestBase

			TestClass4 extends TestBase


	Cucumber annotations: @When, @Then, @Given, @Before, @After ...
					classes can not be inherited if they have cucumber annotations


Method Overriding (dynamic/runtime polymrophism): giving different implementation to the method
					
					MUST happen in sub class

					can not override static, final and private methods

					toString()

					equals()

					WebDriver driver= new ChromerDriver();
					driver.get("URL")



final keyword: unchanagble
		
		variable: can not be reassigned

		method: can not be overriden

		class: can not be inherited


final vs finally vs finalize


Abstraction: hiding the implementation details from the user
			 Focus on essentials

			 Abstract method: method without the body

			 2 ways:
			 	1. abstract class: meant to be parent class

			 			Ex: BasePage, TestBase


			 	2. Interface: blueprint of the class, meant to be implemented
			 					to provide addition methods through the multiple inheritance

	 					Ex: 
	 						WebDriver
	 						WebElement
	 						TakeScreenShot
	 						JavaScriptExecuter
	 						....
	 						List
	 						Set
	 						Collection
	 						Map
	 						....



Polymorphism: ability of the object to take on many forms
			  reference type decides what is accessible

			  Driver:
			  		WebDriver  getDriver(){

			  		}


Exceptions: checked or unchecked
		
		unchecked exceptions: occurs during the runtime

		checked exceptions: occur during the compile time

	throw: used for manually creating exception


Exception Handlings
		
		1. try & catch: can handle any exception

		2. throws: ONLY for the checked exception




























