Java Bootcamp Day01

Topics:
		1. Primitives: int, double, char, boolean
		2. Primitive Type Castings: Implicit vs Explicit
		3. Wrapper class
		4. String
		5. Loops: for & while
		6. Array
		7. for each loop
		8. Custom Methods
		9. Method Overloading
		10. Constructor
		11. Class & Objects
		12. Static vs Instance
		13. Import Statements
		14. Access Modifiers
		15. OOP Encapsulations
		16. OOP Inheritance
		17. Method Overriding
		18. Final keyword
		19. OOP Abstraction
		20. Abstract Class vs Interface
		21. OOP Polymorphism
		22. Reference Type Castings: Upcasting vs DownCasting
		23. Exceptions: checked & unchecked
		24. Exception Handlings
		25. final vs finally vs finalize
		26. garbage collection & garbage collector
		27. Collections: List, Set, Queue
		28. Iteable & Iterator
		29. Maps

Data Types:
	1. Primitive Data Types
			byte < short < int < long < float < double

	2. Non-primitive Data Types

Type castings:
	1. Primitive Type casting (Primitives)

			1.1 implicit casting: casting smaller primitive type to larger primitive type
			1.2 explicit casting: casting larger primitive type to smaller primitive type

	2. Reference Type casting (Inheritance)

			2.1 Up-casting: casting smaller reference type to larger reference type
			2.2 Down-casting: casting larger reference type to smaller reference type


Wrapper Classes: the objects that represents the primitives


String: char sequences. IMMUTABLE
			"Java"
			new String("Java")

		String Methods: charAt, length, lower & upper, substring, equals, contains, startsWith, endsWith, split, toCharARray, indexOf, lastIndexOf

		==

StringBuilder: char sequences. MUTABLE. Not Synchronized
			
			new StringBuilder("Java")

StringBuffer: char sequences. MUTABLE. Synchronized
			
			new StringBuffer("Java")


Loops: repeated actions
	
	for loop: if the number of iteration is fixed

		for(initialization; condition; Iteration ){
				statements
		}

	while loop: if the number of iteration is NOT fixed, and we want it to be iterated until condition is false

		while(Condition){
			statements
		}









